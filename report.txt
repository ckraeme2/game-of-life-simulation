Charles Kraemer

	From the user's perspective, the program is intended to simulate "Conway's Game of Life", outputting new iterations of the game corresponding to user provided options.  There are two methods by which the user can direct the simulation: one represented by the "interactive" mode of the game, and the other represented by the "batch" mode of the game.  In the "interactive" mode of the game, upon each new iteration, the user is presented with a menu of options to choose from corresponding to modifications that can be made to the game board.  The user can choose to add a live cell to the board, remove a live cell from the board, advance the game by one iteration, cause the game to advance to new iterations continuously, or quit the game.  The user will be prompted to choose an option continuously until they decide either to let the game run infinitely or to quit the game.  To utilize the "batch" mode of the game, 
the user can provide a string representing the name of a file containing a sequence of pre-selected options from the menu at the command line when they run their executable. In this mode, the user will not be prompted to choose from a set of options, as the program will instead perform the tasks corresponding to the information in the provided data file.
	In order to perform these tasks, the program is split into three files.  The first file, "lifeboard.h", defines a class "lifeboard", which streamlines production and modification of the game board.  The next file, "lifeboard.cpp" serves as the implementation file for the lifeboard class.  This file defines the default constructor of the lifeboard class such that any lifeboard variable will be initialized as a 40x40 board of dead cells, or blank space.  A function to add a cell to the board is defined in the implementation file so as to accept a user input of an ordered pair (x,y) and set the board value at that coordinate to the 'X' character that represents that it is alive.  Similarly, the function to remove a live cell from the board accepts an ordered pair(x,y) from the user and sets the board value at that coordinate to the ' ' character that represents that it is dead.  The function to advance the game of life by an iteration uses a nested for loop to sift through each point on the board, using a set of conditionals at each point to count up its number of neighbors, ultimately using another set of conditionals to determine if that cell will be dead or alive in the next generation depending on the quantity of its neighbors.  Moving on to the main file, the program first checks the value of the argc variable to determine if the user inputted a file name at the command line.  If the argc value is equal to 1 and the only string at the command line is the executable name, then the program runs its 'interactive mode', using a while loop to continuously display the board at each successive iteration and to prompt the user for an input corresponding to a potential modification of the board at each iteration.  The program conditionally calls certain functions that act upon a variable of the lifeboard class depending on the input provided by the user.  For the play continuously option, a while loop is set to call the advance function infinitely. The 'usleep' function is used so as to lower the rate at which new iterations are displayed such that each individual iteration will be visible to the user. If the user opts to quit the game, the boolean variable dictating the continued activity of the main while loop is set to false such that the board will no longer be displayed and the user will no longer be prompted for options.  If the argc value is equal to 2, the program sets a string variable corresponding to the name of the file provided by the user equal to argv[1], which contains the string entered by the user at the command line.  The ifstream class is used to treat the provided file as an input stream.  A while loop is used to sift through the provided file at each line until the end of the file, getting the commands at each line.  For cases in which a line will consist of multiple variables, delimiters are used.  Given that different values are separated by a space in the sample file online, the delimiter is a space.  Identically to the 'interactive mode', the program conditionally calls functions to operate on a variable of the lifeboard class depending on which command it has read from the input file during a given iteration of the while loop.  The 'batch' mode reacts to different input options identically to the 'interactive' mode.
	In order to test the program, I first ran it for every potential input option in both the 'interactive' and 'batch' mode.  It completed tasks corresponding to each option successfuly. In the condition that the user or input file provide commands to the computer that do not correspond to a function, I have set the program to output an error message to the monitor reporting an invalid input.  Likewise, if the user inputs more than one file name at the command line for the 'batch' mode, I have set the program to output an error message, as the information provided to it in this case does not correspond to either the 'interactive' mode or the 'batch' mode.  Thus, the program functions properly in each case that it is designed for,and successfuly reports and describes errors when it is provided with inappropriate inputs.
